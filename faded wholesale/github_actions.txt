name: Faded Skies CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ========================================
  # LINT AND TEST JOBS
  # ========================================
  
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true
      
    - name: Upload lint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lint-results
        path: eslint-report.json

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-for-ci
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-node${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.node-version == 18
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # ========================================
  # BUILD JOBS
  # ========================================
  
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --production
      
    - name: Create production build
      run: |
        mkdir -p dist
        cp -r . dist/
        cd dist && npm prune --production
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: production-build
        path: dist/

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ========================================
  # DEPLOYMENT JOBS
  # ========================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Deploy to staging
      run: ./scripts/deploy.sh staging
      env:
        SERVER_HOST: ${{ secrets.STAGING_HOST }}
        SERVER_USER: ${{ secrets.STAGING_USER }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Run smoke tests
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_URL }}/health
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker-build, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: production-build
        path: ./dist
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Deploy to production
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} '
          cd /var/www/faded-skies-backend &&
          git pull origin main &&
          npm ci --production &&
          pm2 reload ecosystem.config.js --env production
        '
        
    - name: Health check
      run: |
        sleep 60
        for i in {1..10}; do
          if curl -f ${{ secrets.PROD_URL }}/health; then
            echo "Health check passed"
            break
          fi
          echo "Health check attempt $i failed, retrying..."
          sleep 30
        done
        
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  deploy-serverless:
    name: Deploy Serverless
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[serverless]')
    environment: serverless-production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Serverless Framework
      run: npm install -g serverless
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Deploy with Serverless
      run: serverless deploy --stage production
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASS: ${{ secrets.EMAIL_PASS }}

  # ========================================
  # MONITORING AND ALERTS
  # ========================================
  
  monitor:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: API Health Monitoring
      run: |
        for i in {1..5}; do
          echo "Monitoring API health (attempt $i)..."
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.PROD_URL }}/health)
          if [ $response -eq 200 ]; then
            echo "✅ API is healthy"
          else
            echo "❌ API health check failed with status: $response"
            exit 1
          fi
          sleep 60
        done
        
    - name: Database Connection Test
      run: |
        response=$(curl -s ${{ secrets.PROD_URL }}/api/products)
        if [[ $response == *"id"* ]]; then
          echo "✅ Database connection is working"
        else
          echo "❌ Database connection failed"
          exit 1
        fi

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, monitor]
    if: always()
    
    steps:
    - name: Clean up old Docker images
      run: |
        echo "Cleaning up old Docker images..."
        # This would typically connect to your registry and clean up old images
        
    - name: Update status badge
      run: |
        echo "Updating deployment status..."
        # Update README badge or status page

# ========================================
# SECRETS REQUIRED:
# 
# Repository Secrets:
# - SSH_PRIVATE_KEY: SSH key for server access
# - STAGING_HOST: Staging server hostname
# - STAGING_USER: Staging server username
# - STAGING_URL: Staging application URL
# - PROD_HOST: Production server hostname
# - PROD_USER: Production server username
# - PROD_URL: Production application URL
# - SLACK_WEBHOOK_URL: Slack webhook for notifications
# - JWT_SECRET: Production JWT secret
# - DATABASE_URL: Production database URL
# - EMAIL_USER: Production email username
# - EMAIL_PASS: Production email password
# - AWS_ACCESS_KEY_ID: AWS access key for serverless
# - AWS_SECRET_ACCESS_KEY: AWS secret key for serverless
# - SNYK_TOKEN: Snyk security scanning token
# 
# Environment Variables:
# - NODE_ENV: Set to 'production' for production deployment
# - All other environment variables from .env.example
# ========================================